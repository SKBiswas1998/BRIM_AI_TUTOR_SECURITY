import requests
import json
from datetime import datetime

def verify_authentication_bypass():
    """Verify and document the authentication bypass vulnerability"""
    print("="*60)
    print("üö® VERIFYING AUTHENTICATION BYPASS VULNERABILITY")
    print("="*60)
    
    backend_url = "https://fastapi-tutor-app-backend-208251878692.asia-south1.run.app"
    
    # Test critical endpoints without any authentication
    critical_endpoints = [
        "/api/user",
        "/subjects/", 
        "/metrics",
        "/health",
        "/openapi.json",
        "/docs"
    ]
    
    vulnerable_endpoints = []
    
    for endpoint in critical_endpoints:
        try:
            print(f"\nüîç Testing {endpoint} without authentication...")
            
            # Test with NO headers at all
            response = requests.get(f"{backend_url}{endpoint}", timeout=5)
            
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                print(f"   üö® VULNERABLE: No authentication required!")
                
                # Try to extract data
                try:
                    data = response.json()
                    if data:
                        print(f"   üìä Data exposed: {str(data)[:200]}...")
                        
                        # Check for sensitive information
                        data_str = str(data).lower()
                        sensitive_keywords = ['user', 'email', 'admin', 'password', 'secret', 'key', 'token']
                        found_sensitive = [kw for kw in sensitive_keywords if kw in data_str]
                        
                        if found_sensitive:
                            print(f"   ‚ö†Ô∏è  Contains sensitive data: {found_sensitive}")
                        
                        vulnerable_endpoints.append({
                            "endpoint": endpoint,
                            "status": response.status_code,
                            "data_type": type(data).__name__,
                            "data_preview": str(data)[:100],
                            "sensitive_keywords": found_sensitive,
                            "severity": "CRITICAL" if found_sensitive else "HIGH"
                        })
                    else:
                        print(f"   ‚ÑπÔ∏è  Empty response")
                        vulnerable_endpoints.append({
                            "endpoint": endpoint,
                            "status": response.status_code,
                            "data_type": "empty",
                            "severity": "MEDIUM"
                        })
                        
                except json.JSONDecodeError:
                    # Not JSON, check for HTML/text content
                    content = response.text[:500]
                    print(f"   üìÑ Content preview: {content[:100]}...")
                    
                    if 'swagger' in content.lower() or 'api' in content.lower():
                        print(f"   ‚ö†Ô∏è  Contains API documentation!")
                        vulnerable_endpoints.append({
                            "endpoint": endpoint,
                            "status": response.status_code,
                            "data_type": "html/documentation",
                            "severity": "HIGH"
                        })
                        
            elif response.status_code == 401:
                print(f"   ‚úÖ Properly protected (401 Unauthorized)")
            elif response.status_code == 403:
                print(f"   ‚úÖ Properly protected (403 Forbidden)")
            elif response.status_code == 404:
                print(f"   ‚ÑπÔ∏è  Not found (404)")
            else:
                print(f"   ‚ùì Unexpected status: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Error: {str(e)}")
    
    # Test data extraction endpoints specifically
    print(f"\nüîç Testing data extraction endpoints...")
    
    data_endpoints = [
        "/math/topics/",
        "/math/algebra/subtopics/",
        "/English/topics/",
        "/quiz_results/",
        "/dashboard/math/algebra/"
    ]
    
    for endpoint in data_endpoints:
        try:
            response = requests.get(f"{backend_url}{endpoint}", timeout=5)
            if response.status_code == 200:
                try:
                    data = response.json()
                    if data:
                        print(f"   üö® {endpoint}: Exposes data without auth!")
                        vulnerable_endpoints.append({
                            "endpoint": endpoint,
                            "status": response.status_code,
                            "data_type": type(data).__name__,
                            "severity": "HIGH"
                        })
                except:
                    pass
        except:
            continue
    
    # Generate vulnerability report
    print(f"\n" + "="*60)
    print("üìã VULNERABILITY ASSESSMENT REPORT")
    print("="*60)
    
    if vulnerable_endpoints:
        critical_count = len([v for v in vulnerable_endpoints if v.get("severity") == "CRITICAL"])
        high_count = len([v for v in vulnerable_endpoints if v.get("severity") == "HIGH"])
        medium_count = len([v for v in vulnerable_endpoints if v.get("severity") == "MEDIUM"])
        
        print(f"\nüö® TOTAL VULNERABLE ENDPOINTS: {len(vulnerable_endpoints)}")
        print(f"   Critical: {critical_count}")
        print(f"   High: {high_count}")
        print(f"   Medium: {medium_count}")
        
        print(f"\nüìä DETAILED FINDINGS:")
        for vuln in vulnerable_endpoints:
            print(f"\n   {vuln['severity']}: {vuln['endpoint']}")
            print(f"      Status: {vuln['status']}")
            if 'data_preview' in vuln:
                print(f"      Data: {vuln['data_preview']}...")
            if 'sensitive_keywords' in vuln and vuln['sensitive_keywords']:
                print(f"      Sensitive: {vuln['sensitive_keywords']}")
        
        print(f"\nüî• IMMEDIATE ACTIONS REQUIRED:")
        print("1. Add authentication middleware to ALL API endpoints")
        print("2. Disable /docs and /openapi.json in production")
        print("3. Review and secure all data-exposing endpoints")
        print("4. Implement proper JWT validation")
        print("5. Add rate limiting to prevent abuse")
        
        # Save detailed report
        report = {
            "scan_date": datetime.now().isoformat(),
            "total_vulnerable_endpoints": len(vulnerable_endpoints),
            "severity_breakdown": {
                "critical": critical_count,
                "high": high_count, 
                "medium": medium_count
            },
            "vulnerable_endpoints": vulnerable_endpoints,
            "recommendations": [
                "Implement authentication middleware on all protected endpoints",
                "Disable API documentation in production environment",
                "Add proper JWT token validation",
                "Implement rate limiting and request throttling",
                "Review and secure all data-exposing endpoints",
                "Add comprehensive logging and monitoring"
            ]
        }
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        with open(f"authentication_bypass_report_{timestamp}.json", "w") as f:
            json.dump(report, f, indent=2)
        
        print(f"\n‚úÖ Detailed report saved: authentication_bypass_report_{timestamp}.json")
        
    else:
        print(f"\n‚úÖ No authentication bypass vulnerabilities found!")
    
    return vulnerable_endpoints

if __name__ == "__main__":
    verify_authentication_bypass()