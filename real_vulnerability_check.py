import requests
import json
import warnings
warnings.filterwarnings("ignore")

class RealVulnerabilityChecker:
    def __init__(self):
        self.base_url = "https://brimai-test-v1.web.app"
        
    def check_response_content(self, endpoint):
        """Check what's actually in the response, not just status code"""
        try:
            response = requests.get(self.base_url + endpoint, verify=False, timeout=5)
            
            print(f"\n[Testing] {endpoint}")
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                # Check response headers
                content_type = response.headers.get('Content-Type', '')
                print(f"Content-Type: {content_type}")
                
                # Try to parse as JSON
                try:
                    data = response.json()
                    print(f"Response is JSON")
                    
                    # Check if it's actual data or just a message
                    if isinstance(data, dict):
                        # Look for signs of real data vs error messages
                        if any(key in str(data).lower() for key in ['error', 'unauthorized', 'login', 'auth required', 'forbidden']):
                            print("✓ PROTECTED: Response contains auth error message")
                            return False
                        
                        # Check for actual user data
                        if any(key in str(data).lower() for key in ['user', 'email', 'score', 'quiz', 'name', 'id', 'results', 'data']):
                            print("❌ VULNERABLE: Response contains actual data:")
                            print(f"   Sample: {str(data)[:200]}...")
                            return True
                        
                        # Check if empty object/array
                        if data == {} or data == []:
                            print("✓ PROTECTED: Empty response")
                            return False
                            
                    elif isinstance(data, list) and len(data) > 0:
                        print("❌ VULNERABLE: Response contains data array:")
                        print(f"   Items in array: {len(data)}")
                        print(f"   First item: {str(data[0])[:100]}...")
                        return True
                        
                except json.JSONDecodeError:
                    # Not JSON, check HTML content
                    content = response.text[:500]
                    
                    # Check if it's a login page or actual data
                    if any(indicator in content.lower() for indicator in ['login', 'sign in', 'authenticate', 'unauthorized']):
                        print("✓ PROTECTED: Redirected to login page")
                        return False
                    
                    # Check if it contains data
                    if any(indicator in content.lower() for indicator in ['dashboard', 'results', 'score', 'user:', 'email:']):
                        print("❌ VULNERABLE: HTML contains user data")
                        print(f"   Preview: {content[:200]}...")
                        return True
                    
                    print(f"ℹ️  HTML Response: {content[:100]}...")
                    
            elif response.status_code == 401 or response.status_code == 403:
                print("✓ PROTECTED: Requires authentication")
                return False
                
            elif response.status_code == 404:
                print("ℹ️  Endpoint not found")
                return False
                
            else:
                print(f"ℹ️  Other status: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"Error testing {endpoint}: {str(e)}")
            return False
    
    def test_with_fake_token(self, endpoint):
        """Test with invalid JWT token"""
        print(f"\n[Testing with fake JWT] {endpoint}")
        
        fake_tokens = [
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
            "invalid.token.here",
            "null",
            ""
        ]
        
        for token in fake_tokens:
            try:
                headers = {"Authorization": f"Bearer {token}"}
                response = requests.get(self.base_url + endpoint, headers=headers, verify=False, timeout=5)
                
                if response.status_code == 200:
                    try:
                        data = response.json()
                        if data and not any(key in str(data).lower() for key in ['error', 'unauthorized', 'invalid']):
                            print(f"   ❌ VULNERABLE: Accepts fake token: {token[:20]}...")
                            return True
                    except:
                        pass
            except:
                pass
        
        print("   ✓ Rejects fake tokens")
        return False

def main():
    print("="*60)
    print("BrimAI Real Vulnerability Assessment")
    print("="*60)
    
    checker = RealVulnerabilityChecker()
    
    # Critical endpoints to test
    endpoints = [
        "/api/dashboard",
        "/api/quiz/results", 
        "/api/users",
        "/api/quiz/answers",
        "/api/profile",
        "/api/admin",
        "/api/quiz/1",
        "/api/leaderboard"
    ]
    
    vulnerabilities = []
    
    print("\n[PHASE 1] Testing without authentication")
    print("-"*60)
    
    for endpoint in endpoints:
        if checker.check_response_content(endpoint):
            vulnerabilities.append(endpoint)
    
    print("\n[PHASE 2] Testing with fake authentication")
    print("-"*60)
    
    for endpoint in endpoints:
        if checker.test_with_fake_token(endpoint):
            vulnerabilities.append(f"{endpoint} (fake token)")
    
    # Summary
    print("\n" + "="*60)
    print("ASSESSMENT SUMMARY")
    print("="*60)
    
    if vulnerabilities:
        print(f"\n❌ CONFIRMED VULNERABILITIES ({len(vulnerabilities)}):")
        for vuln in vulnerabilities:
            print(f"   - {vuln}")
        print("\nThese endpoints are actually exposing data without proper authentication!")
    else:
        print("\n✓ No confirmed data exposure found")
        print("The endpoints may return 200 but are not leaking sensitive data")
    
    print("\n" + "="*60)

if __name__ == "__main__":
    main()
